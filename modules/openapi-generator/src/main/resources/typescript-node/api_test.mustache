import * as models from '../model/models'
import http from 'http'
import { AddressInfo } from 'net'
import { {{classname}} } from '../api/apis';
import uuid from 'uuid/v5'
const TEST_TOKEN = "1ba60ccaae1c1a5230"


let defaultBasePath = '{{{basePath}}}';
function consistentUUID(input: string): string {
    const base = '8504b9b8-326d-11ea-aec2-2e728ce88125'
    return uuid(input, base)}
const UUID = consistentUUID("54521fd525e721e32a72ee91")


async function makeClients(): Promise<{{classname}}> {
    return new Promise((resolve, reject) => {
        const server = http.createServer(function (req, res) {
            if(req.url) {
{{#operations}}
    {{#operation}}
                if (new RegExp('^{{{path}}}$'.split("/").join("\\/"){{#pathParams}}.replace('{' + '{{baseName}}' + '}',"[a-zA-Z0-9-]+"){{/pathParams}}).test(req.url)
                    && req.method == '{{httpMethod}}'
                    && req.headers.accept == '{{{produces.0.mediaType}}}'){
                    res.writeHead(200, {'Content-Type': "application/json"});
                    res.end(JSON.stringify({
                        data:
                        {{{examples.0.example}}}
                        }))
                }
    {{/operation}}
{{/operations}}
            }else {
                 res.writeHead(404, {"Content-Type": 'text/plain'});
            }})
        server.on('error', reject)
        server.listen(() => {
            const {port} = server.address() as AddressInfo
            const url = `http://localhost:${port}`
            const client = new {{classname}}(url)
            client.accessToken = TEST_TOKEN
            resolve(client)
            })
        })
}
describe('test for {{classname}}', () => {
        let apis: {{classname}}
        beforeAll(async () => {
            apis = await makeClients()
        })
        {{#operations}}
            {{#operation}}
        test('test {{operationId}}',  async() => {
        {{#allParams}} {{#isBodyParam}}{{#required}}
            const bodyContent:models.{{{dataType}}} = {{{example}}}
        {{/required}}{{/isBodyParam}}{{/allParams}}
            return  apis.{{operationId}}({{#allParams}}{{#isPathParam}}{{#required}}UUID,{{/required}}{{/isPathParam}}{{#isBodyParam}}{{#required}}bodyContent{{/required}}{{/isBodyParam}}{{/allParams}}).then(result =>{
                expect(result.response).toBeTruthy()
                expect(result.body instanceof models.{{returnType}}).toBeTruthy()
                expect(result.response.statusCode).toBe(200)
            })
        });
            {{/operation}}
        {{/operations}}
    });

